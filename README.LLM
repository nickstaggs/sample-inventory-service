# Product Inventory API - LLM Assistant Guide

## Application Overview
This is a Node.js/Express API for managing products and their inventory, using DynamoDB via LocalStack for data storage.

## Key Components
- **Products**: CRUD operations for product catalog
- **Inventory**: Track stock levels and locations for products
- **Database**: DynamoDB tables (`Products` and `Inventory`)

## API Endpoints
### Health Check
- `GET /ping` - Service health check

### Products
- `POST /api/products` - Create new product with optional initial inventory
  ```typescript
  interface CreateProductRequest {
    name: string;
    description: string;
    price: number;
    category: string;
    initialQuantity?: number; // optional, defaults to 0
  }
  ```
- `GET /api/products` - List all products
- `GET /api/products/:id` - Get product details

### Inventory
- `PUT /api/inventory` - Update inventory (creates if doesn't exist)
- `GET /api/inventory/:productId` - Get inventory for product

## Data Models
### Core Types
```typescript
interface WithId {
  id: string;
}

interface WithAuditFields {
  createdAt: string;  // ISO-8601 format
  updatedAt: string;  // ISO-8601 format
}

interface Product extends WithId, WithAuditFields {
  name: string;
  description: string;
  price: number;      // Floating point number
  category: string;
}

interface Inventory extends WithId, WithAuditFields {
  productId: string;  // References Product.id
  quantity: number;   // Integer count
}
```

## Development Setup
1. Start services:
```bash
docker-compose up
```

2. Initialize database:
```bash
npm run init-db
```

3. Run in development mode:
```bash
npm run dev
```

## Testing
Postman collection available at:
`postman/Product Inventory API.postman_collection.json`

## Key Files
- `src/index.ts` - Main application entry point
- `src/products/` - Product-related routes and services
- `src/inventory/` - Inventory-related routes and services
- `src/shared/database/dynamodb.ts` - DynamoDB adapter
- `scripts/init-db.ts` - Database initialization script

## Environment Variables
- `AWS_ENDPOINT`: LocalStack endpoint (default: http://localhost:4566)
- `AWS_REGION`: AWS region (default: us-east-1)
- `AWS_ACCESS_KEY_ID`: AWS access key (default: test)
- `AWS_SECRET_ACCESS_KEY`: AWS secret key (default: test)

## Important Note for LLM Assistants
- Do not add new fields or modify existing types unless explicitly directed
- Always verify with the user before making any changes to data models

## Common Tasks
- Adding new product fields: Update `Product` interface and related services (only when directed)
- Adding inventory features: Extend `InventoryService` (only when directed)
- Changing database: Implement new `DatabaseClient` adapter (only when directed)
